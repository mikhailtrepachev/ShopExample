//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAutoClient {
    get(autoId: number): Observable<AutoDto>;
    getList(): Observable<AutoListDto>;
    getPersonalAuto(personalAutoId: number): Observable<PersonalAutoDto>;
    getPersonalAutoList(): Observable<PersonalAutoListDto>;
    getCard(cardId: number): Observable<CardDto>;
    getCardList(): Observable<CardListDto>;
    create(commandDto: CreateAutoCommandDto): Observable<AutoDto>;
    createPersonalAuto(commandDto: CreatePersonalAutoCommandDto): Observable<PersonalAutoDto>;
    createCard(commandDto: CreateCardCommandDto): Observable<CardDto>;
    deleteCar(carId: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class AutoClient implements IAutoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(autoId: number): Observable<AutoDto> {
        let url_ = this.baseUrl + "/api/autos/{autoId}";
        if (autoId === undefined || autoId === null)
            throw new Error("The parameter 'autoId' must be defined.");
        url_ = url_.replace("{autoId}", encodeURIComponent("" + autoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AutoDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AutoDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<AutoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AutoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getList(): Observable<AutoListDto> {
        let url_ = this.baseUrl + "/api/autos/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AutoListDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AutoListDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<AutoListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AutoListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getPersonalAuto(personalAutoId: number): Observable<PersonalAutoDto> {
        let url_ = this.baseUrl + "/api/autos/personal/get/{personalAutoId}";
        if (personalAutoId === undefined || personalAutoId === null)
            throw new Error("The parameter 'personalAutoId' must be defined.");
        url_ = url_.replace("{personalAutoId}", encodeURIComponent("" + personalAutoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPersonalAuto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPersonalAuto(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PersonalAutoDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PersonalAutoDto>;
        }));
    }

    protected processGetPersonalAuto(response: HttpResponseBase): Observable<PersonalAutoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PersonalAutoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getPersonalAutoList(): Observable<PersonalAutoListDto> {
        let url_ = this.baseUrl + "/api/autos/personal/get/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPersonalAutoList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPersonalAutoList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PersonalAutoListDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PersonalAutoListDto>;
        }));
    }

    protected processGetPersonalAutoList(response: HttpResponseBase): Observable<PersonalAutoListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PersonalAutoListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getCard(cardId: number): Observable<CardDto> {
        let url_ = this.baseUrl + "/api/autos/card/get/{cardId}";
        if (cardId === undefined || cardId === null)
            throw new Error("The parameter 'cardId' must be defined.");
        url_ = url_.replace("{cardId}", encodeURIComponent("" + cardId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCard(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCard(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CardDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CardDto>;
        }));
    }

    protected processGetCard(response: HttpResponseBase): Observable<CardDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CardDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getCardList(): Observable<CardListDto> {
        let url_ = this.baseUrl + "/api/autos/card/list/get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCardList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCardList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CardListDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CardListDto>;
        }));
    }

    protected processGetCardList(response: HttpResponseBase): Observable<CardListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CardListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(commandDto: CreateAutoCommandDto): Observable<AutoDto> {
        let url_ = this.baseUrl + "/api/autos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AutoDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AutoDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<AutoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AutoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createPersonalAuto(commandDto: CreatePersonalAutoCommandDto): Observable<PersonalAutoDto> {
        let url_ = this.baseUrl + "/api/autos/personal/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreatePersonalAuto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreatePersonalAuto(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PersonalAutoDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PersonalAutoDto>;
        }));
    }

    protected processCreatePersonalAuto(response: HttpResponseBase): Observable<PersonalAutoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PersonalAutoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createCard(commandDto: CreateCardCommandDto): Observable<CardDto> {
        let url_ = this.baseUrl + "/api/autos/card/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCard(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCard(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CardDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CardDto>;
        }));
    }

    protected processCreateCard(response: HttpResponseBase): Observable<CardDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CardDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteCar(carId: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/autos/delete/{carId}";
        if (carId === undefined || carId === null)
            throw new Error("The parameter 'carId' must be defined.");
        url_ = url_.replace("{carId}", encodeURIComponent("" + carId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processDeleteCar(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IOrderClient {
    get(orderId: number): Observable<OrderDto>;
    getList(): Observable<OrderListDto>;
    create(commandDto: CreateOrderCommandDto): Observable<OrderDto>;
}

@Injectable({
    providedIn: 'root'
})
export class OrderClient implements IOrderClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(orderId: number): Observable<OrderDto> {
        let url_ = this.baseUrl + "/api/Order/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OrderDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OrderDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<OrderDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getList(): Observable<OrderListDto> {
        let url_ = this.baseUrl + "/api/Order/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OrderListDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OrderListDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<OrderListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(commandDto: CreateOrderCommandDto): Observable<OrderDto> {
        let url_ = this.baseUrl + "/api/Order";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commandDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OrderDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OrderDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<OrderDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AutoDto implements IAutoDto {
    id?: number;
    distributorName?: string;
    modelName?: string;
    issueYear?: number;

    constructor(data?: IAutoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.distributorName = _data["distributorName"];
            this.modelName = _data["modelName"];
            this.issueYear = _data["issueYear"];
        }
    }

    static fromJS(data: any): AutoDto {
        data = typeof data === 'object' ? data : {};
        let result = new AutoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["distributorName"] = this.distributorName;
        data["modelName"] = this.modelName;
        data["issueYear"] = this.issueYear;
        return data;
    }
}

export interface IAutoDto {
    id?: number;
    distributorName?: string;
    modelName?: string;
    issueYear?: number;
}

export class AutoListDto implements IAutoListDto {
    items?: AutoDto[];

    constructor(data?: IAutoListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AutoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AutoListDto {
        data = typeof data === 'object' ? data : {};
        let result = new AutoListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAutoListDto {
    items?: AutoDto[];
}

export class PersonalAutoDto implements IPersonalAutoDto {
    id?: number;
    autos?: AutoDto | undefined;
    registrationState?: RegistrationState;
    registrationNumber?: string;
    technicalState?: TechnicalState;
    color?: Colors;
    wheelSize?: number;
    horsePower?: number;

    constructor(data?: IPersonalAutoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.autos = _data["autos"] ? AutoDto.fromJS(_data["autos"]) : <any>undefined;
            this.registrationState = _data["registrationState"];
            this.registrationNumber = _data["registrationNumber"];
            this.technicalState = _data["technicalState"];
            this.color = _data["color"];
            this.wheelSize = _data["wheelSize"];
            this.horsePower = _data["horsePower"];
        }
    }

    static fromJS(data: any): PersonalAutoDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonalAutoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["autos"] = this.autos ? this.autos.toJSON() : <any>undefined;
        data["registrationState"] = this.registrationState;
        data["registrationNumber"] = this.registrationNumber;
        data["technicalState"] = this.technicalState;
        data["color"] = this.color;
        data["wheelSize"] = this.wheelSize;
        data["horsePower"] = this.horsePower;
        return data;
    }
}

export interface IPersonalAutoDto {
    id?: number;
    autos?: AutoDto | undefined;
    registrationState?: RegistrationState;
    registrationNumber?: string;
    technicalState?: TechnicalState;
    color?: Colors;
    wheelSize?: number;
    horsePower?: number;
}

export enum RegistrationState {
    CZ = 0,
    DE = 1,
    A = 2,
    SK = 3,
    S = 4,
    PL = 5,
    H = 6,
    NL = 7,
    IT = 8,
}

export enum TechnicalState {
    Excellent = 0,
    Good = 1,
    Bad = 2,
    Broken = 3,
}

export enum Colors {
    Blue = 0,
    White = 1,
    Black = 2,
    Orange = 3,
    Purple = 4,
    Red = 5,
}

export class PersonalAutoListDto implements IPersonalAutoListDto {
    items?: PersonalAutoDto[];

    constructor(data?: IPersonalAutoListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PersonalAutoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PersonalAutoListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonalAutoListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPersonalAutoListDto {
    items?: PersonalAutoDto[];
}

export class CardDto implements ICardDto {
    id?: number;
    personalAuto?: PersonalAutoDto;
    price?: number;
    description?: string | undefined;
    isPromoted?: boolean;

    constructor(data?: ICardDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.personalAuto = _data["personalAuto"] ? PersonalAutoDto.fromJS(_data["personalAuto"]) : <any>undefined;
            this.price = _data["price"];
            this.description = _data["description"];
            this.isPromoted = _data["isPromoted"];
        }
    }

    static fromJS(data: any): CardDto {
        data = typeof data === 'object' ? data : {};
        let result = new CardDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["personalAuto"] = this.personalAuto ? this.personalAuto.toJSON() : <any>undefined;
        data["price"] = this.price;
        data["description"] = this.description;
        data["isPromoted"] = this.isPromoted;
        return data;
    }
}

export interface ICardDto {
    id?: number;
    personalAuto?: PersonalAutoDto;
    price?: number;
    description?: string | undefined;
    isPromoted?: boolean;
}

export class CardListDto implements ICardListDto {
    items?: CardDto[];

    constructor(data?: ICardListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CardDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CardListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CardListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICardListDto {
    items?: CardDto[];
}

export class CreateAutoCommandDto implements ICreateAutoCommandDto {
    distributorName?: string;
    modelName?: string;
    issueYear?: number;

    constructor(data?: ICreateAutoCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.distributorName = _data["distributorName"];
            this.modelName = _data["modelName"];
            this.issueYear = _data["issueYear"];
        }
    }

    static fromJS(data: any): CreateAutoCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAutoCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["distributorName"] = this.distributorName;
        data["modelName"] = this.modelName;
        data["issueYear"] = this.issueYear;
        return data;
    }
}

export interface ICreateAutoCommandDto {
    distributorName?: string;
    modelName?: string;
    issueYear?: number;
}

export class CreatePersonalAutoCommandDto implements ICreatePersonalAutoCommandDto {
    autoId?: number;
    color?: Colors;
    registrationState?: RegistrationState;
    registrationNumber?: string;
    technicalState?: TechnicalState;
    wheelSize?: number;
    horsePower?: number;

    constructor(data?: ICreatePersonalAutoCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.autoId = _data["autoId"];
            this.color = _data["color"];
            this.registrationState = _data["registrationState"];
            this.registrationNumber = _data["registrationNumber"];
            this.technicalState = _data["technicalState"];
            this.wheelSize = _data["wheelSize"];
            this.horsePower = _data["horsePower"];
        }
    }

    static fromJS(data: any): CreatePersonalAutoCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePersonalAutoCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["autoId"] = this.autoId;
        data["color"] = this.color;
        data["registrationState"] = this.registrationState;
        data["registrationNumber"] = this.registrationNumber;
        data["technicalState"] = this.technicalState;
        data["wheelSize"] = this.wheelSize;
        data["horsePower"] = this.horsePower;
        return data;
    }
}

export interface ICreatePersonalAutoCommandDto {
    autoId?: number;
    color?: Colors;
    registrationState?: RegistrationState;
    registrationNumber?: string;
    technicalState?: TechnicalState;
    wheelSize?: number;
    horsePower?: number;
}

export class CreateCardCommandDto implements ICreateCardCommandDto {
    personalAutoId?: number;
    price?: number;
    description?: string | undefined;
    isPromoted?: boolean;

    constructor(data?: ICreateCardCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personalAutoId = _data["personalAutoId"];
            this.price = _data["price"];
            this.description = _data["description"];
            this.isPromoted = _data["isPromoted"];
        }
    }

    static fromJS(data: any): CreateCardCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCardCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personalAutoId"] = this.personalAutoId;
        data["price"] = this.price;
        data["description"] = this.description;
        data["isPromoted"] = this.isPromoted;
        return data;
    }
}

export interface ICreateCardCommandDto {
    personalAutoId?: number;
    price?: number;
    description?: string | undefined;
    isPromoted?: boolean;
}

export class OrderDto implements IOrderDto {
    id?: number;
    cards?: CardDto;
    fullName?: string;
    contactEmail?: string;
    message?: string;

    constructor(data?: IOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cards = _data["cards"] ? CardDto.fromJS(_data["cards"]) : <any>undefined;
            this.fullName = _data["fullName"];
            this.contactEmail = _data["contactEmail"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): OrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cards"] = this.cards ? this.cards.toJSON() : <any>undefined;
        data["fullName"] = this.fullName;
        data["contactEmail"] = this.contactEmail;
        data["message"] = this.message;
        return data;
    }
}

export interface IOrderDto {
    id?: number;
    cards?: CardDto;
    fullName?: string;
    contactEmail?: string;
    message?: string;
}

export class OrderListDto implements IOrderListDto {
    items?: OrderDto[];

    constructor(data?: IOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrderDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderListDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOrderListDto {
    items?: OrderDto[];
}

export class CreateOrderCommandDto implements ICreateOrderCommandDto {
    cardId?: number;
    fullName?: string;
    contactEmail?: string;
    message?: string;

    constructor(data?: ICreateOrderCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cardId = _data["cardId"];
            this.fullName = _data["fullName"];
            this.contactEmail = _data["contactEmail"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): CreateOrderCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrderCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cardId"] = this.cardId;
        data["fullName"] = this.fullName;
        data["contactEmail"] = this.contactEmail;
        data["message"] = this.message;
        return data;
    }
}

export interface ICreateOrderCommandDto {
    cardId?: number;
    fullName?: string;
    contactEmail?: string;
    message?: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}